RPI_VERSION ?= 4

BOOTMNT ?= /Volumes/boot
LLVMPATH ?= /usr/local/opt/llvm/bin

CLANGFLAGS = -DRPI_VERSION=$(RPI_VERSION) -O3 -Wall -nostdlib -ffreestanding \
	         -Iinclude -mgeneral-regs-only -mno-unaligned-access \
	         --target=aarch64-elf -MMD

BUILD_DIR = build
SRC_DIR = src
DIST_DIR = dist

all: kernel8.img armstub

clean:
	rm -rf $(BUILD_DIR) armstub/$(BUILD_DIR) *.elf *.o *.img > /dev/null 2> /dev/null || true

clean-all: clean
	rm -rf $(DIST_DIR)

deploy :
	@echo "Deploy to $(value BOOTMNT)"
	@echo ""
	cp $(DIST_DIR)/* $(BOOTMNT)/
	sync

eject :
	diskutil unmount $(BOOTMNT)

servedocs :
	python -m http.server --directory docs &

$(BUILD_DIR)/%_c.o: $(SRC_DIR)/%.c
	mkdir -p $(@D)
	$(LLVMPATH)/clang $(CLANGFLAGS) -c $< -o $@

$(BUILD_DIR)/%_s.o: $(SRC_DIR)/%.S
	mkdir -p $(@D)
	$(LLVMPATH)/clang $(CLANGFLAGS) -c $< -o $@

ARMSTUB_FLAGS = -DBCM2711=1 -DGIC=1

armstub/$(BUILD_DIR)/%_s.o: armstub/$(SRC_DIR)/%.S
	mkdir -p $(@D)
	$(LLVMPATH)/clang $(ARMSTUB_FLAGS) $(CLANGFLAGS) -c $< -o $@

C_FILES = $(wildcard $(SRC_DIR)/*.c)
ASM_FILES = $(wildcard $(SRC_DIR)/*.S)
OBJ_FILES = $(C_FILES:$(SRC_DIR)/%.c=$(BUILD_DIR)/%_c.o)
OBJ_FILES += $(ASM_FILES:$(SRC_DIR)/%.S=$(BUILD_DIR)/%_s.o)

DEP_FILES = $(OBJ_FILES:%.o=%.d)
-include $(DEP_FILES)

kernel8.img: $(SRC_DIR)/linker.ld $(OBJ_FILES)
	mkdir -p $(DIST_DIR)
	@echo "Building for RPI $(value RPI_VERSION)"
	@echo ""
	$(LLVMPATH)/ld.lld -m aarch64elf -T $(SRC_DIR)/linker.ld -o $(BUILD_DIR)/kernel8.elf $(OBJ_FILES)
ifeq ($(RPI_VERSION), 4)
	$(LLVMPATH)/llvm-objcopy $(BUILD_DIR)/kernel8.elf -O binary $(DIST_DIR)/kernel8-rpi4.img
else
	$(LLVMPATH)/llvm-objcopy $(BUILD_DIR)/kernel8.elf -O binary $(DIST_DIR)/kernel8.img
endif
	cp config.txt $(DIST_DIR)/

ARMSTUB_FILES = $(wildcard armstub/$(SRC_DIR)/*.S)
ARMSTUB_OBJ_FILES = $(ARMSTUB_FILES:armstub/$(SRC_DIR)/%.S=armstub/$(BUILD_DIR)/%_s.o)

ARMSTUB_DEP_FILES = $(ARMSTUB_OBJ_FILES:%.o=%.d)
-include $(ARMSTUB_DEP_FILES)

armstub: $(ARMSTUB_OBJ_FILES)
	mkdir -p $(DIST_DIR)
	$(LLVMPATH)/ld.lld -m aarch64elf --section-start=.text=0 -o armstub/$(BUILD_DIR)/armstub.elf $(ARMSTUB_OBJ_FILES)
	$(LLVMPATH)/llvm-objcopy armstub/$(BUILD_DIR)/armstub.elf -O binary $(DIST_DIR)/armstub-new.bin

.PHONY: all armstub clean clean-all deploy eject servedocs
